[* Function Definitions *]
function test_assign ( test_id1 int )
	int test_declaration_var1, test_declaration_var2; {

	test_declaration_var1 = 1;
	test_declaration_var1 = 2;
	return test_declaration_var1 + test_declaration_var1;
}

function test_return_start ( test_id2, test_id3 real ) {
	return test_id2 * test_id3;
}

function test_if_start () bool test_declaration_var3; real test_declaration_var4; {
	if (test_declaration_var3 == true) {
		if (test_declaration_var4 == 4.0) {
			put(1);
		}
		else {
			put(0);
		}
		fi
	}
	fi
}

function test_print () {
	put(2);
}

function test_scan (test_id4 int, test_id5 bool, test_id6 real) {
	get(test_id4, test_id5, test_id6);
	return true;
}

#

[* Declaration List *]
int test_declaration_var4, test_declaration_var5, x, res1;
bool test_declaration_var6, test_declaration_var7, res2;
real test_declaration_var8, test_declaration_var9, res3;

#

[* Statement List *]

test_declaration_var6 = true;  [* Assign *]
test_declaration_var7 = false;
test_declaration_var4 = 2;
test_declaration_var5 = 3;
test_declaration_var8 = 1.0;


if (test_declaration_var6 == true) {  [* Compound/If *]
	x = - (test_declaration_var4 + test_declaration_var5) *
	      (test_declaration_var4 - test_declaration_var5);
}
else {
	x = (test_declaration_var4 + test_declaration_var5) /
	    (test_declaration_var4 - test_declaration_var5);
}
fi

put(test_declaration_var8);  [* Put/Scan *]
get(test_declaration_var9);
put(test_declaration_var8 * test_declaration_var9);

while (test_declaration_var7 == false) {  [* While *]
	x = x + 1;
	if ( x > 100 ) {
		test_declaration_var7 = true;
	}
	else {
		put(x);
	}
	fi
}
endwhile

res1 = test_assign(x);
res2 = test_scan(x, test_declaration_var6, test_declaration_var8);
res3 = test_return_start(test_declaration_var8, test_declaration_var9);

return;  [* Return *]